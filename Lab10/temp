
int readNumber();
void writeAnswer(int result);

typedef struct
{
    uint8_t WeekDay; /*!< Specifies the RTC Date WeekDay (not necessary for HAL_RTC_SetDate).
                         This parameter can be a value of @ref RTC_WeekDay_Definitions */

    uint8_t Month; /*!< Specifies the RTC Date Month (in BCD format).
                         This parameter can be a value of @ref RTC_Month_Date_Definitions */

    uint8_t Date; /*!< Specifies the RTC Date.
                         This parameter must be a number between Min_Data = 1 and Max_Data = 31 */

    uint8_t Year; /*!< Specifies the RTC Date Year.
                         This parameter must be a number between Min_Data = 0 and Max_Data = 99 */

} RTC_DateTypeDef;

typedef struct
{
    uint8_t Hours; /*!< Specifies the RTC Time Hour.
                                 This parameter must be a number between Min_Data = 0 and Max_Data = 23 */

    uint8_t Minutes; /*!< Specifies the RTC Time Minutes.
                                 This parameter must be a number between Min_Data = 0 and Max_Data = 59 */

    uint8_t Seconds; /*!< Specifies the RTC Time Seconds.
                                 This parameter must be a number between Min_Data = 0 and Max_Data = 59 */

} RTC_TimeTypeDef;

struct User
{
    uint32_t keyID;
    bool isFirstEnterRangeAvailable;
    bool isFirstExitRangeAvailable;
    uint16_t enterAccessTime[64];
    uint16_t exitAccessTime[64];
};

enum class Side
{
    Iniside,
    Outside,
    None
};

User users[256];

bool isLeapYear(uint16_t year)
{
    year += 2000;
    bool isLeap = false;

    if (year % 4 == 0)
        isLeap = true;

    if (year % 100 == 0)
        isLeap = false;

    if (year % 400 == 0)
        isLeap = true;

    return isLeap;
}

uint32_t currentWeekNumber(RTC_DateTypeDef currentDate)
{
    uint32_t days = 0;
    uint16_t currentYear = currentDate.Year + 2000;

    for (int year = 2018; year < currentYear; year++)
    {
        if (isLeapYear(year))
        {
            days += 366;
        }
        else
        {
            days += 365;
        }
    }

    for (int i = 1; i < currentDate.Month; i++)
    {
        if (i <= 7)
        {
            if (i == 2 && isLeapYear(currentDate.Year))
            {
                days += 29;
                continue;
            }
            else if (i == 2 && !isLeapYear(currentDate.Year))
            {
                days += 28;
                continue;
            }

            if (i % 2 == 0 && i != 2)
            {
                days += 30;
            }
            else
            {
                days += 31;
            }
        }
        else
        {
            if (i % 2 == 0)
            {
                days += 31;
            }
            else
            {
                days += 30;
            }
        }
    }

    uint32_t n = (days + currentDate.Date - 1) / 7 - 52 * (currentDate.Year - 18);
    return n;
}

/**
 * @brief Find the biggest number smaller than maxNumber
*/
uint16_t findMaxIndex(uint16_t *array, uint8_t size, uint32_t maxNumber)
{
    uint16_t minNumberIndex = 0;
    uint16_t minNumber = 0;

    for (int i = 0; i < size; i++)
    {
        if (array[i] > minNumber && array[i] < maxNumber)
        {
            minNumber = array[i];
            minNumberIndex = i;
        }
    }

    return minNumberIndex;
}

bool isTimeAllowing(RTC_TimeTypeDef currentTime, RTC_DateTypeDef currentDate, User user, Side side)
{
    uint32_t weeks = currentWeekNumber(currentDate);
    uint32_t currentMinute = 0;
    bool areEven = false;

    if (weeks % 2 == 0)
    {
        currentMinute = 10080; //7 days * 24 hours * 60 minutes
        areEven = true;
    }

    currentMinute += ((currentDate.WeekDay - 1) * 24 + currentTime.Hours) * 60 + currentTime.Minutes;

    if (side == Side::Outside)
    {
        uint8_t minMinuteIndex = findMaxIndex(user.enterAccessTime, 64, currentMinute);

        if (minMinuteIndex % 2 == 0)
        {
            return !user.isFirstEnterRangeAvailable;
        }
        else
        {
            return user.isFirstEnterRangeAvailable;
        }
    }
}

void GetPage(uint32_t Adress)
{
    int counter = 0;

    for (uint32_t i = 0x08000000; i < 0x080FFFFF; i += 0x7FF, counter++)
    {
        std::cout << counter - 1 << " ";
        std::cout << std::hex << i << "\n";
        if (i > Adress)
        {
            /* std::cout << counter - 1 << " " << std::hex << i - 0x7FF << "\n"; */
            return;
        }
    }
}

/* #include <iostream>
#include <string>
#include <vector>
#include <set>

namespace util
{
    std::vector<int> StringToIntVector(std::string line)
    {
        std::vector<int> intVector;
        std::string word = "";

        for (char c : line)
        {
            if (c == ' ')
            {
                intVector.push_back(stoi(word));
                word = "";
            }
            else
            {
                word += c;
            }
        }
        intVector.push_back(stoi(word));

        return intVector;
    }

    int maxPos(std::vector<int> vector)
    {
        int max = 0;

        for (int i : vector)
        {
            if (i > max)
                max = i;
        }

        for (int i = 0; i < vector.size(); i++)
        {
            if (vector[i] == max)
                return i;
        }

        return 0;
    }

    int minPos(std::vector<int> vector)
    {
        int min = INT_MAX;

        for (int i = vector.size() - 1; i >= 0; i--)
        {
            if (vector[i] < min)
                min = vector[i];
        }

        for (int i = vector.size() - 1; i >= 0; i--)
        {
            if (vector[i] == min)
                return i;
        }

        return 0;
    }
}

int main()
{
    int iterations;
    int a, b;
    int inter;
    int counter = 0;
    std::vector<int> results;

    std::cin >> iterations;

    for (int i = 0; i < iterations; i++)
    {
        std::cin >> a >> b;

        if (a > b)
        {
            inter = b;

            do
            {
                inter += b;
            } while (inter < a );

            results.push_back(inter - a);
        }
        else
        {
            results.push_back(b - a);
        }
    }

    for (int i = 0; i < iterations; i++)
    {
        std::cin >> a >> b;

        if (a > b)
        {
            inter = b;

            do
            {
                inter += b;
            } while (inter < a);

            results.push_back(inter - a);
        }
        else
        {
            results.push_back(b - a);
        }
    }

    for (int i : results)
    {
        std::cout << i << "\n";
    }
} */